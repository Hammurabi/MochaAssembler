//
// The MIT License (MIT)
//
// Copyright (c) 2018 Riverssen
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

class MyAltcoin extends PoW {
  private set     contractOwners
  private map     ledger
  private uint256 assets = 120_000_000__000_000
  private uint    amt_transactions_per_block = 200
  private queue   utxo_queue
  private uint256 block_reward

  public function MyAltcoin() : void
  {
      contractOwners = new set()
      contractOwners.add(msg.sender)
      utxo_queue     = new queue()
      mine = true
      block_reward   = 0.5
  }

  public function addOwner(PublicAddress owner) : void
  {
    if(contractOwners.contains(msg.sender))
      contractOwners.add(owner)
  }

  public function removeOwner(PublicAddress owner) : void
  {
    if(contractOwners.contains(msg.sender))
      contractOwners.remove(owner)
  }

  public function sendTransaction(uint256 amt, uint amt_fee, PublicAddress to) : void
  {
    if(amt_fee > 0)
    {
      if(ledger[msg.sender] >= (amt + amt_fee))
      {
        utxo_set.add(new UTXO(msg.sender, to, amt, amt_fee))
      }
    }
  }

  public override function ProofOfWork(uint nonce) : void
  {
      if(utxo_queue.ready())
      {
        uint256 hash = to_uint256(sha3(utxo_queue.peek(), ledger.bytes(), nonce))
        if(hash < difficulty)
        {
            UTXO utxo = utxo_queue.pop()

            ledger[utxo.to] = ledger[utxo.to] + utxo.amt
            ledger[utxo.from] = ledger[utxo.from] - utxo.amt

            if(assets > block_reward)
              ledger[msg.sender] = ledger[msg.sender] + block_reward

            ledger[msg.sender] = ledger[msg.sender] + utxo.fee
        }
      }
  }

  public function kill() : void
  {
    if(contractOwners.contains(msg.sender))
      destroy()
  }
}
