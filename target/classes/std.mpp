//
// The MIT License (MIT)
//
// Copyright (c) 2018 Riverssen
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#define false 0
#define true 1
#define False 0
#define True 1

//typedef char bool

public function malloc(ulong size) : ulong
public function calloc(ulong size) : ulong
public function delete(ulong o) : void
public function sizeof(void o) : ulong
public function typeof(void o) : string
public function memcpy(void dst, void src, ulong size) : void
public function free(void x) : void
public function delete(void x) : void
{
    free (x)
}

public function err(string s) : void
public function out(string x) : void
public function print(string x) : void
{
    out(x)
}

public function exit(uint x) : void
public function wait(ulong x) : ulong
public function sleep(ulong x) : ulong
{
    return wait(x)
}
public function exception(string s) : void
public function array_equal(void a, void b) : bool
public function dereference(ptr Object a) : void
public function toptr(ref Object a) : ulong

class Object{
    public function destroy() : void
    {
        free (this)
    }

    public operator+ (Object o) : Object
    {
        exception("math op '+' not allowed.")
    }

    public operator- (Object o) : Object
    {
        exception("math op '-' not allowed.")
    }

    public operator* (Object o) : Object
    {
        exception("math op '*' not allowed.")
    }

    public operator/ (Object o) : Object
    {
        exception("math op '/' not allowed.")
    }

    public operator^ (Object o) : Object
    {
        exception("math op '^' not allowed.")
    }

    public operator++ (Object o) : Object
    {
        exception("math op '++' not allowed.")
    }

    public operator-- (Object o) : Object
    {
        exception("math op '--' not allowed.")
    }

    public operator== (Object o) : bool
    {
        return array_equal(this, toptr(object), len())
    }

    public operator& (Object o) : Object
    {
        exception("logical op '&' not allowed.")
    }

    public operator&& (Object o) : Object
    {
        exception("logical op '&&' not allowed.")
    }

    public function len() : ulong

    public function equals(ref Object object) : Object
    {
        return dereference(this) == object;
    }
}

template <typename A>
class sp_t{
    private ptr A _ptr_

    public function sp_t(A val) : void
    {
        this._ptr_[0] = val
    }

    public function get() : A
    {
        return _ptr_[0]
    }
}

class PublicAddress{
    void address[25]

    public function PublicAddress(string a) : void
    {
        memcpy(address, a, 25)
    }
}

class Datetime
{
    private ulong time

    public function Datetime(ulong t) : void
    {
        time = t
    }
}

class Message{
    PublicAddress sender
    Datetime      time
}

Message msg = new Message

//namespace std
//{
//    template <typename A>
//    class bst_node{
//        A           value
//        bst_node<A> right_child = nullptr
//        bst_node<A> left_child = nullptr
//
//        bst_node(A value)
//        {
//            this.value = value
//        }
//    }
//
//    template <typename A>
//    class bst{
//        bst_node<A> root
//
//        public function add(A a) : void
//        {
//            if (root != null)
//                root.add(a)
//            else root = new bst_node(a)
//        }
//    }
//
//    template <typename A, typename B>
//    class map{
//    }
//
//    //template<ulong L>
//    //class Key{
//    //    void key[L];
//    //}
//}

#reset